### 영속성 컨텍스트

1. 엔티티 매니저 팩토리와 엔티티 매니저
    엔티티 매니저 팩토리가 엔티티 매니저를 생성하게 해줌

2. 영속성 컨텍스트  
    엔티티를 영구 저장하는 환경
    EntityManager.persist(entity);
    엔티티 매니저를 통해서 영속성 컨텍스트에 접근
    J2SE환경 : 엔티티 매니저와 영속성 컨텍스트가 1:1
    J2EE, 스프링 프레임워크 같은 컨테이너 환경 : 엔티티 매니저와 영속성 컨텍스트가 N:1

3. 엔티티의 생명주기
    - 비영속(new/transient) : 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태
    - 영속(managed) : 영속성 컨텍스트에 관리되는 상태
    - 준영속(detached) : 영속성 컨텍스트에 저장되었다가 분리된 상태
    - 삭제(removed) : 삭제된 상태

4. 비영속
    //객체를 생성한 상태(비영속)
    Member member = new Member();
    member.setId("member1");
    member.setUsername("회원1");

5. 영속
    //객체를 생성한 상태(비영속)
    //객체를 저장한 상태(영속)
    EntityManger em = emf.createEntityManager();
    em.getTransaction().begin();
    //객체를 저장한 상태(영속)
    em.persist(member);

6. 준영속, 삭제

    //회원 엔티티를 영속성 컨텍스트에서 분리, 준영속 상태
    em.detach(member);

    //객체를 삭제한 상태(삭제)
    em.remove(member);

7. 영속성 컨텍스트의 이점
    - 1차 캐시
    - 동일성 보장
    - 트랜잭션을 지원하는 쓰기 지연
    - 변경감지(Dirty Checking)
    - 지연로딩(Lazy Loading)

8. 영속성

    - Member member = new Member();
        member.setId("member1");
        member.setUsername("회원1");
        //1차 캐시에 저장됨
        em.persist(member);
        //1차 캐시에서 조회
        Member findMember = em.find(Member.class, "member1");

9. 엔티티 등록 : 트랜잭션을 지원하는 쓰기 지연
    EntityManager em = emf.createEntityManager();
    EntityTransaction transaction = em.getTransaction();
    //엔티티 매니저는 데이터 변경시 트랜잭션을 시작해야 한다,.
    transaction.begin() // 트랜잭션 시작
    em.persist(memberA)
    em.persist(memberB)
    //여기까지 Insert SQL을 데이터베이스에 보내지 않는다.
    //커밋하는 순간 데이터베이스에 Insert SQL을 보낸다
    transaction.commit(); // 트랜잭션 커밋

10. 엔티티 수정
    EntityManager em = emf.createEntityManager();
    EntityTransaction transaction = em.getTransaction();
    transaction.begin(); //트랜잭션 시작

    //영속 엔티티 조회
    Member memberA = em.find(Member.class, "memberA");

    //영속 엔티티 데이터 수정
    memberA.setUsername("hi");
    memberA.setAge(19);
    transaction.commit(); //트랜잭션 커밋

11. 엔티티 삭제
    //삭제 대상 엔티티 조회
    Member memberA = em.find(Member.class, "memberA");

    em.remove(memberA); //엔티티 삭제

12. 플러시(flush)

    영속성 컨텍스트의 변경내용을 데이터베이스에 반영
    영속성 컨텍스트를 비우지 않음
    영속성 컨텍스트의 변경내용을 데이터베이스에 동기화
    트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화하면 됨.

13. 플러시 발생
    - 변경감지
    - 수정된 엔티티 쓰기 지연 SQL 저장소에 등록
    - 쓰기지연 SQL 저장소의 쿼리를 데이터베이스에 전송(등록, 수정, 삭제 쿼리)

14. 영속성 컨텍스트를 플러시하는 방법
    - em.flush() : 직접 호출
    - 트랜잭션 커밋 = 플러시 자동호출
    - JPQL 쿼리 실행 = 플러시 자동 호출

    //중간에 JPQL 실행
    query = em.createQuery("select m from Member m", Member.class);
    List<Member> members = query.getResultList();

15. 플러시 모드 옵션
    em.setFlushMode(FlushModeType.COMMIT)
    FlushModeType.AUTO : 커밋이나 쿼리를 실행할 때 플러시 (기본값)
    FlushModeType.COMMIT :커밋할 때만 플러시하는

16. 준영속 상태
    영속 -> 준영속
    영속 상태의 엔티티가 영속성 컨텍스트에서 분리(detached)
    영속성 컨텍스트가 제공하는 기능을 사용 못함    

17. 준영속 상태로 만드는 방법
    em.detach(entity) : 특정 엔티티만 준영속 상태로 전환
    em.clear() : 영속성 컨텍스트를 완전히 초기화
    em.close() : 영속성 컨텍스트를 종료