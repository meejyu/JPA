JPA 소개

### JPA 시작

1. JPA란?
    Java Persistence API
    자바 진영의 ORM 기술 표준

2. ORM이란?
    Object-relational mapping(객체 관계 매핑)
    객체는 객체대로 설계,
    관계형 데이터베이스는 관계형 데이터베이스대로 설계
    ORM 프레임워크가 중간에서 매핑

3. JPA를 사용해야 하는 이유
    객체 중심으로 개발, 생산성, 유지보수 등등

4. JPA 간단하게 사용해보기
    저장 : em.persist(member)
    조회 : em.find(memberId)
    수정 : member.setName("변경할 이름")
    삭제 : jpa.remove(member)

5. 같은 트랜잭션 안에서는 같은 엔티티를 반환(약간의 조회 성능 향상)
    동일한 트랜잭션 안에서 조회한 엔티티는 같음을 보장함.
    * 트랜잭션이란?
    데이터베이스의 상태를 변화시키기 위해서 수행하는 작업의 단위
    ex) 게시판 사용자가 게시글을 올려 insert되고 
        그 게시판이 알아서 업데이트 되어 최신정보가 select될 때
        insert문과 select문 둘다를 작업의 단위라고 한다.

6. em.persist(member) 트랜잭션을 커밋할 때까지 INSERT SQL을 모은다.
    transaction.commit() : JDBC BATCH SQL 기능을 사용해서 한번에 SQL 전송
    update, delete로 이한 로우(row)락 시간 최소화
    changeMember(memberA);
    deleteMember(memberB);
    비즈니스 로직 수행 동안 DB 로우락이 걸리지 않는다.
    트랜잭션 커밋 시 update, delete SQL 실행하고 바로 커밋

7. 지연로딩과 즉시로딩
    지연로딩 : 객체가 실제 사용될 때 로딩
    즉시로딩 : JOIN SQL로 한번에 연관된 객체까지 미리 조회

8. 데이터베이스 방언
    방언 : SQL 표준을 지키지 않는 특정 데이터베이스만의 고유한 기능
    JPA는 특정 데이터 베이스에 종속X

9. JPA
    @Entity : JPA가 관리할 객체, 데이터베이스상에서 데이터로 관리하는 대상
    엔티티를 위해서 테이블을 설계하고 데이터를 추가하는데
    엔티티 매니저는 : 여러 엔티티 객체들을 관리하는 역할, 이때 관리는 LifeCycle이다.
    자신이 관리해야하는 엔티티 객체들을 영속 컨텍스트(Persistence Context)에 넣어 관리한다.
    영속성 컨텍스트 : JPA가 엔티티 객체들을 모아두는 공간이라고 이해할 수 있다.
    @Id : 데이터베이스 PK와 매핑, pk키로 만들어준다.

    ex)
    @Entity
    public class Member {
        @Id
        private Long id;
        private String name;
        게터, 세터
    }
    = 
    create table Member (
        id bigint not null,
        name varchar(255),
        primary key (id)
    );

11. 주의
    엔티티 매니저 팩토리는 하나만 생성해서 애플리케이션 전체에서 공유
    엔티티 매니저는 쓰레드간에 공유X(사용하고 버려야 한다)
    JPA의 모든 데이터 변경은 트랜잭션 안에서 실행

12. JPQL
    JPA는 SQL을 추상화한 JPQL이라는 객체 지향 쿼리 언어 제공
    SQL과 문법유사 
    select, from, where, group by, having, join 지원
    SQL은 데이터베이스 테이블을 대상으로 쿼리
    특정 데이터베이스 SQL에 의존X
    객체 지향 SQL







    
