객체지향 쿼리 언어

** 객체지향 쿼리 언어 소개
    - JPA는 다양한 쿼리 방법을 지원
        - JPQL
        - JPA
        - QueryDSL
        - 네이티브 SQL
        - MyBatis, SpringJdbcTemplate

    - JPQL
        EntityManager.find();
        모든 DB 데이터를 객체로 변환해서 검색하는 것은 불가능
        SQL과 문법 유사, SELECT, FROM, WHERE, GROUP BY, HAVING, JOIN 지원
        객체를 대상으로 쿼리, 객체 지향 SQL
    
    - Criteria
        JPA 공식 기능
        복합하고 실용성 없어서 안씀

    - QueryDSL
        컴파일 시점에 문법 오류를 찾을 수 있음
        동적쿼리 작성 편리함
        실무 사용 권장
    
    - 네이티브 SQL
        JPA가 제공하는 SQL을 직접 사용하는 기능
        JPQL로 해결할 수 없는 특정 데이터베이스에 의존적인 기능

** JPQL 기본 문법과 기능

    - JPQL은 SQL을 추상화해서 특정데이터베이스 SQL에 의존하지 않는다
    - JPQL은 결국 SQL로 변환된다

    - JPQL 문법
        - 엔티티와 속성을 대소문자 구분 (Member, age)
        - JPQL 키워드는 대소문자 구분x(select, from, where)
        - 엔티티 이름 사용, 테이블 이름이 아님
        - 별칭은 필수(m)

    - 집합과 정렬
        - Group by, having, order by

    - TypeQuery, QueryDSL   
        - TypeQuery : 반환 타입이 명확할 때 사용
            ex) TypeQuery<Member> query = em.createQuery("SELECT m FROM Member m", Member.class);
        - Query : 반환 타입이 명확하지 않을 때 사용
            ex) em.createQuery("SELECT m.username, m.age from Member m");

    - 결과 조회 API
        - query.getResultList() : 결과가 하나 이상일 때, 리스트 반환, 결과가 없으면 빈 리스트 반환
        - query.getSingleResult() : 결과가 정확히 하나, 단일 객체 반환
            결과가 없으면 : NoResultException
            둘 이상이면 : NonUniqueResultException

    - 파라미터 바인딩 : 이름 기준, 위치 기준
        SELECT m FROM Member m where m.username =:username
        query.setParameter("username", usernameParam);

        SELECT m FROM Member m where m.username=?1
        query.setParameter(1, usernameParam);

    - 프로젝션
        - select 절에 조회할 대상을 지정하는 것
        - 프로젝션 대상 : 엔티티, 임베디드 타입, 스칼라 타입(숫자, 문자 등 기본 데이터 타입)
        - DISTINCT로 중복 제거

    - 프로젝션 : 여러 값 조회
        &&&&&&&&&&&& 여기도 이해안됨 &&&&&&&&&&&&&&&&&
        - select m.username, m.age From Member m 
            1. Query 타입으로 조회
            2. Object[] 타입으로 조회
            3. new 명령어로 조회

    - 페이징 API    
        - JPA는 페이징을 다음 두 API로 추상화
        - setFirstResult(int startPosition) : 조회 시작 위치(0부터 시작)
        - setMaxResult(int maxResult) : 조회할 데이터 수
            ex) String jpql = "select m from member m order by m.name desc";
            List<Member> resultList = em.createQuery(jpql, Member.class)
                    .setFirstResult(10)
                    .setMaxResult(20)
                    .getResultList();
    
    - 페이징 API - MySQL 방언
        - SELECT
            M.ID AS ID,
            M.AGE AS AGE,
            M.TEAM_ID AS TEAM_ID,
            M.NAME AS NAME
        FROM
            MEMBER M 
        ORDER BY 
            M.NAME DESC LIMIT ?, ?
        (오라클 방언 생략)

    - 조인 
        - 내부조인 : select m from Member m [inner] join m.team t 
        - 외부조인 : select m from Member m left [outer] join m.team t 
        - 세타조인 : select count(m) from Member m, Team t where m.username = t.name 

    - 조인 : on절 
        - on 절을 활용한 조인 
            1. 조인 대상 필터링
            2. 연관관계 없는 엔티티 외부 조인 

    - 조인 대상 필터링 
        - select m, t from Member m left join m.team t on t.name = 'A'
    - 연관관계 없는 엔티티 외부 조인
        - 회원의 이름과 팀의 이름이 같은 대상 외부 조인
        - select m, t from Member m left join Team t on m.username = t.name 
    
    - 서브 쿼리
        - 나이가 평균보다 많은 회원
            select m from Member m where m.age > (select avg(m2.age) from Member m2)

    - 서브 쿼리 지원 함수
        - [NOT] EXISTS (subquery) : 서브쿼리에 결과가 존재하면 참
        - {ALL | ANY | SOME} (subquery)
        - ALL 모두 만족하면 참
        - ANY, SOME : 같은 의미, 조건을 하나라도 만족하면 참
        - [NOT] IN (subquery) : 서브쿼리의 결과 중 하나라도 같은 것이 있으면 참
    - JPA 서브 쿼리 한계
        - JPA는 where, having 절에서만 서브 쿼리 사용 가능
        - select 절도 가능
        - from 절의 서브 쿼리는 현재 jpql에서 불가능 

    - JPQL 타입 표현
        - 문자 : 'HELLO'
        - 숫자 : Long, Double, Float 
        - Boolean : TRUE, FALSE
        - ENUM, 엔티티 타입
    - 조건식 : CASE 식
        - COALESCE : 하나씩 조회해서 null이 아니면 반환
        - NULLIF : 두 값이 같으면 null 반환, 다르면 첫번쨰 값 반환
    - JPQL 기본 함수
        - CONCAT, SUBSTRING, TRIM, LOWER, UPPER, LENGTH, LOCATE, ABS, SQRT, MOD, SIZE, INDEX(JPA 용도)
    - 사용자 정의 함수 호출
        - 하이버네이트는 사용전 방언에 추가해야한다.
        - 사용하는 DB방언을 상속받고, 사용자 정의 함수를 등록한다.

** JPQL 경로 표현식

    - 경로 표현식 : .(점)을 찍어 객체 그래프를 탐색하는 것
        select m.username -> 상태 필드
            from Member m 
            join m.team t -> 단일 값 연관 필드
            join m.orders o -> 컬렉션 값 연관 필드
        where t.name = '팀A'

    - 경로 표현식 용어 정리
        - 상태필드 : 단순히 값을 저장하기 위한 필드
        - 연관필드 : 연관관계를 위한 필드
            - 단일 값 연관 필드
            - 컬렉션 값 연관 필드

    - 경로 표현식 특징
        - 상태 필드 : 경로 탐색의 끝, 탐색X
        - 단일 값 연관 경로 : 묵시적 내부 조인 (inner join) 발생, 탐색O 
        - 컬렉션 값 연관 경로 : 묵시적 내부 조인 발생, 탐색X 
            - FROM 절에서 명시적 조인을 통해 별칭을 얻으면 별칭을 통해 탐색 가능
    
    - 상태 필드 경로 탐색
        - JPQL : select m.username, m.age from Member m 
        - SQL : select m.username, m.age from Member m 
    
    - 단일 값 연관 경로 탐색
        - JPQL : select o.member from Order o 
        - SQL : select m.* from Orders o inner join Member m on o.member_id = m.id 
    
    - 명시적 조인, 묵시적 조인 
        - 명시적 조인 : join 키워드 직접 사용
            - select m from Member m join m.team t 
        - 묵시적 조인 : 경로 표현식에 의해 묵시적으로 SQL 조인 발생(내부 조인만 가능) 
            - select m.team from Member m 
    
    - 경로 표현식 ex 
        - select o.member.team from Order o -> 성공
        - select t.members from Team -> 성공
        - select t.members.username from Team t -> 실패 
        - select m.username from Team t join t.member m -> 성공

    - 경로 탐색을 사용한 묵시적 조인 시 주의사항
        - 항상 내부 조인
        - 컬렉션은 경로 탐색의 끝, 명시적 조인을 통해 별칭을 얻어야함
        - 경로 탐색은 주로 select, where 절에서 사용하지만 묵시적 조인으로 인해 SQL의 FROM (JOIN) 절에 영향을 줌
    
    - 실무 조언
        - 가급적 묵시적 조인 대신에 명시적 조인 사용
        - 조인은 SQL 튜닝에 중요 포인트
        - 묵시적 조인은 조인이 일어나는 상황을 한눈에 파악하기 어려움

    $$ 컬렉션 값이란?
        @OneToMany 등등의 연관관계를 맺어 줄때 List로 작성한 엔티티들이 있을것이다. 
        컬렉션 값에서 경로 탐색을 시도하면 실패한다!!!
        만약 탐색을 하고 싶다면 다음 처럼 조인을 사용해서 새로운 별칭을 획득해야 한다.
        ex) select m.username from Team t join t.members m 

** JPQL 패치 조인
    
    - 패치 조인
        - SQL 조인 종류 X 
        - JPQL에서 성능 최적화를 위해 제공하는 기능
        - 연관된 엔티티나 컬렉션을 SQL 한번에 함께 조회하는 기능
        - join fetch 명령어 사용
        - 페치 조인 LEFT, OUTER< INNER, JOIN FETCH 조인경로
    
    - 엔티티 패치 조인
        - 회원을 조회하면서 연관된 팀도 함께 조회(SQL 한번에)
        - SQL을 보면 회원 뿐만 아니라 팀(T.*)도 함께 SELECT
        - JPQL : select m from Member m join fetch m.team 
        - SQL : select M.*, T.* FROM MEMBER M 
                INNER JOIN TEAM T ON M.TEAM_ID = T.ID 

    - 컬렉션 페치 조인
        - 일대다 관계, 컬렉션 패치 조인
        - JPQL 
            select t from Team t join fech t.members where t.name = '팀A';
        - SQL 
            select t.*, m.* from Team t 
            inner join member m on t.id = m.team_id where t.name = '팀A';
    
    - 패치 조인과 DISTINCT 
        - SQL의 DISTINCT는 중복된 결과를 제거하는 명령어
        - JPQL의 DISTINCT 2가지 기능 제공
            1. SQL에 DISTINCT를 추가 
            2. 애플리케이션에서 엔티티 중복 제거 
        - select distinct t from Team t join fetch t.members
            where t.name = '팀A';
        - SQL에서 distinct를 추가하지만 데이터가 다르므로 sql 결과에서 중복 제거 실패 

    - 패치 조인과 일반 조인의 차이
        - 일반 조인 실행시 연관된 엔티티를 함께 조회하지 않음
        - JPQL 
            select t from Team t join t.members m where t.name = '팀A';
        - SQL 
            select t.* from team t inner join member m 
            on t.id = m.team_id where t.name = '팀A';
        - JPQL은 결과를 반환할 때 연관관계 고려X 
        - 단지 select 절에 지정한 엔티티만 조회할 뿐 
        - 여기서는 팀 엔티티만 조회하고, 회원 엔티티는 조회X 
        - 패치 조인을 사용할 때만 연관된 엔티티도 함꼐 조회(즉시 로딩)
        - 패치 조인을 객체 그래프를 SQL 한번에 조회하는 개념
    - 패치 조인의 특징과 한계 
        - 패치 조인 대상에는 별칭을 줄 수 없다.
            - 하이버네이트는 가능, 가급적 사용하지 않는다
        - 둘 이상의 컬렉션은 패치 조인 할 수 없다.
        - 컬렉션을 패치 조인하면 페이지 API(setFirstResult, setMaxResults)를 사용할 수 없다.
            - 일대일, 다대일 같은 단일 값 연관 필드들은 패치 조인해도 페이지 가능
            - 하이버네이트는 경고 로그를 남기고 메모리에서 페이징(매우 위험)
        - 연관된 엔티티들은 SQL 한번으로 조회 - 성능 최적화
        - 엔티티에 직접 적용하는 글로벌 로딩 전략보다 우선함
        - 실무에서 글로벌 로딩 전략은 모두 지연 로딩
        - 최적화가 필요한 곳은 패치 조인 적용
    
    - 패치 조인 정리
        - 모든 것을 패치 조인으로 해결할 수는 없음
        - 패치조인은 객체 그래프를 유지할 때 사용하면 효과적
        - 여러 테이블을 조인해서 엔티티가 가진 모양이 아닌 전혀 다른 결과를 내야 하면, 패치 조인보다는
            일반 조인을 사용하고 필요한 데이터들만 조회해서 DTO로 반환하는 것이 효과적

** JPQL Named 쿼리 

    - Named 쿼리 - 정적 쿼리 
        - 미리 정의해서 이름을 부여해두고 사용하는 JPQL
        - 정적 쿼리 
        - 어노테이션, XML에 정의 
        - 애플리케이션 로딩 시점에 초기화 후 재사용 
        - 애플리케이션 로딩 시점에 쿼리를 검증 

    - Named 쿼리 환경에 따른 설정
        - XML이 항상 우선권을 가진다
        - 애플리케이션 운영 환경에 따라 다른 xml을 배포할 수 있다.

** 벌크 연산

    - 벌크 연산 에제
        - 쿼리 한번으로 여러 테이블 로우 변경
        - executeUpdate()의 결과는 영향받은 엔티티 수 반환
        - update, delete, insert 지원 
    
    - 벌크 연산 주의
        - 벌크 연산은 영속성 컨텍스트를 무시하고 데이터베이스에 직접 쿼리 
            - 벌크 연산을 먼저 실행 
            - 벌크 연산 수행 후 영속성 컨텍스트 초기화 
    