다양한 연관관계 매핑

1. 연관관계 매핑시 고려사항 3가지
    - 다중성, 단방향, 양방향, 연관관계의 주인을 고려해야한다.
    - 다중성 : @ManyToOne @OneToMany @OneToOne @ManyToMany

2. 다대일 [N:1]
    - 일반적으로 많이 쓰는 연관관계

3. 일대다 [1:N]
    - 일대다 단방향은 일대다에서 일이 연관관계의 주인
    - 테이블 일대다 관계는 항상 다쪽에 외래키가 있음
    - 객체와 테이블의 차이 때문에 반대편 테이블의 외래키를 관리하는 특이한 구조
    - @JoinColumn을 꼭 사용해야함. 그렇지 않으면 조인 테이블 방식을 사용함.
    - 연관관계 관리를 위해 추가로 update SQl 실행해야한다.
    - 그러므로 일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용해야함.
    - 일대다 양방향 매핑은 공식적으로 존재하지않는다. 사용하지 말자

4. 일대일 [1:1]
    주 테이블에 외래키
    주 테이블에 외래키를 두고 대상 테이블을 찾음
    객체 지향 개발자 선호
    JPA 매핑 편리
    장점 : 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 확인 가능
    단점 : 값이 없으면 외래 키에 null 허용
        - 주 테이블에 외래키 단방향
            : 다대일 단방향 매핑과 유사 
        - 주 테이블에 외래키 양방향
            : 다대일 양방향 처럼 외래키가 있는 곳이 연관관계의 주인, 반대편은 mappedBy 적용
    대상 테이블에 외래키
    대상 테이블에 외래키가 존재 
    전통적인 데이터베이스 개발자 선호
    장점 : 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조 유지
    단점 : 프록시 기능의 한계로 지연 로딩으로 설정해도 항상 즉시 로딩됨    
        - 대상 테이블에 외래키 단방향
            : JPA 지원안함.
        - 대상 테이블에 외래키 양방향
            : 주 테이블에 외래키 양방향이랑 매핑 방법이 동일.

5. 다대다 [N:M]
    - 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 없음.
    - 연결 테이블을 추가해서 일대다, 다대일로 관계로 풀어내야함.
    but!!!!!!!
    - 객체는 컬렉션을 사용해서 객체 2개로 때다 관계 가능
    - @ManyToMany 사용
    - @JoinTable로 연결 테이블 지정
    - 다대다 매핑 : 단방향, 양방향 가능
    - 실무에서 사용하지 않는다
    - 연결 테이블용 엔티티 추가(연결 테이블을 엔티티로 승격)
    
@JoinTable
    name : 조인 테이블 명
    JoinColumns : 현재 엔티티를 참조하는 외래키
    inverseJoinColumns : 반대방향 엔티티를 참조하는 외래키



