고급매핑

상속관계 매핑
- 관계형 데이터베이스는 상속 관계가 없다.
- 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사하다.
- 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑
- 슈퍼타입 서브타입 논리 모델을 실제 물리 모델로 구현하는 방법
    - 각각 테이블로 변환 : 조인 전략
    - 통합 테이블로 변환 : 단일 테이블 전략
    - 서브타입 테이블로 변환 : 구현 클래스마다 테이블 전략

@Inheritance(strategy=InheritanceType.XXX)
- JOINED : 조인 전략
- SINGLE_TABLE : 단일 테이블 전략
- TABLE_PER_CLASS : 구현 클래스마다 테이블 전략
@DiscriminatorColumn(name="DTYPE")
부모클래스에 선언한다. 하위 클래스를 구분하는 용도의 컬럼이다.
@DiscriminatorValue("XXX")
하위 클래스에 선언한다. 엔티티를 저장할 떄 슈퍼타입의 구분 컬럼에 저장할 값을 지정한다.
어노테이션을 선언하지 않을 경우 기본값으로 클래스 이름이 들어간다.

조인 전략
장점 : 
- 테이블 정규화
- 외래키 참조 무결성 제약 조건 활용가능
- 저장공간 효율화

단점 : 
- 조회시 조인을 많이 사용, 성능 저장하는 
- 조회 쿼리가 복잡함
- 데이터 저장시 insert sql 2번 호출

단일 테이블 전략
장점 : 
- 조인이 필요 없으므로 일반적으로 조회 성능이 빠름
- 조회 쿼리가 단순함

단점 :
- 자식 엔티티가 매핑한 컬럼은 모두 null 허용
- 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있다. 상황에 따라서
조회 성능이 오히려 느려질 수 있다

구현 클래스마다 테이블 전략

이 전략은 데이터베이스 설계자와 ORM 전문가 둘다 추천X

장점 
- 서브 타입을 명확하게 구분해서 처리할 떄 효과적
- not null 제약조건 사용 가능

단점
- 여러 자식 테이블을 함께 조회할 떄 성능이 느림(UNINO SQL 필요)
- 자식 테이블을 통합해서 쿼리하기 어려움

@MappedSuperclass
- 공통 매핑 정보가 필요할 떄 사용(id, name)
- 상속관계 매핑이 아니다.
- 엔티티가 아니다, 테이블 매핑도 안된다. 
- 부모 클래스를 상속 받는 자식 클래스에 매핑 정보만 제공
- 조회, 검색 불가
- 직접 생성해서 사용할 일이 없으므로 추상 클래스 권장
- 테이블과 관계 없고, 단순히 엔티티가 공통으로 사용하는 매핑정보를 모으는 역할
- 주로 등록일, 수정일, 등록자, 수정자 같은 전체 엔티티에서 공통으로 적용하는 정보를 모을 때 사용
- 참고 : @Entity 클래스는 엔티티나 @MappedSuperclass로 지정한 클래스만 상속 가능

상속관계 매핑
- 요구사항 추가
    - 상품의 종류는 음반, 도서, 영화가 있고 이후 더 확장될 수 있다.
    - 모든 데이터는 등록일과 수정일이 필수다.

BaseEntity는 추상클래스로 만들어야 한다. @MappedSuperclass로 만든 클래스만 상속받을 수 있기 때문이다.
@MappedSuperclass










