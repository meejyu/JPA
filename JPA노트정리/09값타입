값 타입

** 기본값 타입
- JPA의 데이터 타입 분류
    엔티티 타입 : @Entity
    값 타입 : int, Integer, String

- 값 타입 분류
    - 기본값 타입
        자바 기본 타입(int, double)
        래퍼 클래스(Integer, Long)
        String

    값 타입은 공유하면 절대 안됨!!, 생명주기를 엔티티의 의존함, 자바의 기본 타입은 절대 공유하면 안됨.
    기본 타입은 항상 값을 복사할것! ex) member.getName();   
    래퍼 클래스나 String 같은 특수한 클래스는 공유 가능한 객체이지만 변경X
    - 임베디드 타입, 컬렉션 값 타입

** 임베디드 타입
    새로운 값 타입을 직접 정의할 수 있음
    JPA는 임베디드 타입(embedded type)이라 함
    주로 기본 값 타입을 모아서 만들어서 복합 값 타입이라고도 함
    int, String과 같은 값 타입
    - 임베디드 타입 사용법
        @Embeddable : 값 타입을 정의하는 곳에 표시
        @Embedded : 값 타입을 사용하는 곳에 표시
        기본 생성자 필수
    - 임베디드 타입의 장점
        재사용, 높은 응집도
        Period.isWork()처럼 해당 값 타입만 사용하는 의미 있는 메소드를 만들 수 있음
        임베디드 타입을 포함한 모든 값 타입은, 값 타입을 소유한 엔티티에 생명주기를 의존함
    - @AttributeOverride : 속성 재정의
        @AttributeOverrides, @AttributeOverride를 사용해서 컬럼 명 속성을 재정의
        임베디드 타입의 값이 null이면 매핑한 컬럼 값은 모두 null

** 값 타입과 불변 객체
    값 타입 공유 참조
        임베디드 타입 같은 값 타입을 여러 엔티티에서 공유하면 위험함.
        값 타입의 실제 인스턴스인 값을 공유하는 것은 위험
        대신 값(인스턴스)를 복사해서 사용
        직접 정의한 값 타입은 객체타입
        객체 타입은 참조 값을 직접 대입하는 것을 막을 방법이 없다.
        객체의 공유 참조는 피할 수 없다.
    불변 객체
        객체 타입을 수정할 수 없게 만든다.
        값 타입은 불변 객체로 설계해야 한다.
        불변 객체 : 생성 시점 이후 절대 값을 변경할 수 없는 객체
        생성자로만 값을 설정하고 수정자(Setter)를 만들지 않으면 됨
        Integer, String은 자바가 제공하는 대표적인 불변 객체

** 값 타입의 비교
    동일성 비교 : 인스턴스의 참조 값을 비교, == 사용
    동등성 비교 : 인스턴스의 값을 값을 비교, equals() 사용

** 값 타입의 컬렉션
    값 타입을 하나 이상 저장할 떄 사용
    @ElementCollection, @CollectionTable 사용

    일대다 관계에서 cascade = ALL, orphanRemoval = true를 설정한 것과 같다고 볼 수 있다.

    데이터베이스는 컬렉션을 같은 테이블에 저장할 수 없다.
    컬렉션을 저장하기 위한 별도의 테이블이 필요함.
    값 타입 컬렉션의 제약사항
        값 타입은 엔티티와 닫르게 식별자 개념이 없다.
        값은 변경하면 추적이 어렵다
        값 타입 컬렉션에 변경 사항이 발생하면, 주인 엔티티와 연관된 모든 데이터를 삭제하고, 값 타입 컬렉션에 있는 현재 값을 모두 다시 저장한다.
        값 타입 컬렉션을 매핑하는 테이블은 모든 컬럼을 묶어서 기본 키를 구성해야 함, null 입력X, 중복 저장X
        실무에서는 상황에 따라 값 타입 컬렉션 대신에 일대다 관계를 고려

** 값 타입은 정말 값 타입이라 판단될 때만 사용
    식별자가 필요하고, 지속해서 값을 추적, 변경해야 한다면 그것은 값 타입이 아닌 엔티티

** 정리
    • 엔티티 타입의 특징 
        • 식별자O
        • 생명주기관리
        • 공유
    • 값타입의특징
        • 식별자X
        • 생명 주기를 엔티티에 의존
        • 공유하지 않는 것이 안전(복사해서 사용)
        • 불변객체로만드는것이안전

    