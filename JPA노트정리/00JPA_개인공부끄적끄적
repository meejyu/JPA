JPA란?
java Persistencd API
자바 진영의 ORM 기술 표준

ORM이란?
Object-relational mapping(객체관계매핑)
ORM 프레임워크가 중간에서 매핑

하이버네이트
JPA 표준 명세를 구현한 구현체

저장 jpa.persist(member)
조회 Member member = jpa.fin(memberId)
수정 member.setName("변경할이름")
삭제 jpa.remove(member)

JPA의 성능 최적화 기능
1차 캐시와 동일성 보장
트랜잭션을 지원하는 쓰기 지연
지연 로딩
동일한 트랜잭션에서 조회한 엔티티는 같음을 보장

쓰기지연
트랜잭션을 커밋할때까지 insert SQL을 모음
update, delete로 인한 로우락 시간 최소화

지연 로딩 : 객체가 실제 사용될 떄 로딩
즉시 로딩 : join sql로 한번 연관된 객체까지 미리 조회
*대부분 지연 로딩만 씀

@Entity : jpa가 관리할 객체
@Id : 데이터베이스 PK와 매핑

주의사항
엔티티 매니저 팩토리는 하나만 생성해서 애플리케이션 전체에서 공유
앤티티 매니저는 쓰레드간에 공유하지않는다(사용하고 버려야 한다)
jpa의 모든 데이터 변경을 트랜잭션 안에서 실행

jpql
sql을 추상화한 jpql이라는 객체 지향 쿼리 언어 제공
sql과 문법 유사, select,from, where, group by, having, join 지원
엔티티 객체를 대상으로 쿼리, 데이터베이스 테이블을 대상으로 쿼리
객체를 대상으로 검색하는 객체 지향 쿼리

영속성 컨텍스트
엔티티를 영구 저장하는 환경
엔티티 매니저를 통해서 영속성 컨텍스트에 접근

J2SE환경
엔티티매니저와 영속성 컨텍스트가 1:1

J2EE, 스프링 프레임워크 같은 컨테이너 환경
엔티티 매니저와 영속성 컨텍스트가 N:1

엔티티의 생명주기
비영속 : 영속성 컨텍스트와 전혀 관계가 없는 새로운 상태
영속 : 영속성 컨텍스트에 관리되는 상태
준영속 : 영속성 컨텍스트에 저장되었다가 분리된 상태
삭제 : 삭제된 상태

영속성 컨텍스트의 이점
1차 캐시
동일성 보장
트랜잭션을 지원하는 쓰기 지연
변경 감지
지연 로딩

플러시
영속성 컨텍스트의 변경내용을 데이터베이스에 반영
변경 감지
수정된 엔티티 쓰기 지연 SQL 저장소에 등록
쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송(등록, 수정, 삭제 쿼리)
영속성 컨텍스트를 비우지 않음,
영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화
트랜잭션이라는 작업 단위가 중요 -> 커밋 직전에만 동기화하면 됨.

영속성 컨텍스트를 플러시하는 방법
em.flush() : 직접 호출
트랜잭션 커밋 - 플러시 자동 호출
JPQL 쿼리 실행 - 플러시 자동 호출

플러시 모드 옵션
em.setFlushMode(FlushModeType.COMMIT)
FlushModeType.AUTO : 커밋이나 쿼리를 실행할 떄 플러시(기본값)
FlushModeType.COMMIT : 커밋할 떄만 플러시 

준영속 상태
영속 -> 준영속
영속 상태의 엔티티가 영속성 컨텍스트에서 분리
영속성 컨텍스트가 제공하는 기능을 사용 못함
em.detach(entity) : 특정 엔티티만 준영속 상태로 전환
em.clear() : 영속성 컨텍스트를 완전히 초기화
em.close() : 영속성 컨텍스트를 종료

name 필드와 매핑할 테이블의 컬럼 이름
insertable 등록, 변경 가능 여부
nullable null 값의 허용 여부를 설정한다.
columnDefinition 데이터베이스 컬럼 정보를 직접 줄 수 있다.
length 문자 길이 제약조건, String 타입에만 사용한다.

EnumType.STRING: enum 이름을 데이터베이스에 저장

Temporal
날짜 타입을 매핑할 때 사용

@Lob
데이터베이스 BLOB, CLOB 타입과 매핑

2022/03/10

중복처리!!
별로 마주할 일 없는 시나리오라고 생각할 수 있으나, 그렇게 따지면 항상 hibernate를 거치면 되므로 연관관계 편의 메서드 자체도 필요가 없어지게 된다.
하지만… 위에서도 언급했지만 그건 정말 위험한 코드이다. 언제 어디서 예기치 못한 오류가 발생할지 모른다.

ORM으로 바라보기 보다 객체지향으로 먼저 바라봐야 한다고 (나는) 생각한다.(ㅋㅋ)
좀 더 완벽하게 만들어보자.

class Member{
    public void setTeam(Team team){
        if(this.team != null){
            this.team.getMembers().remove(this);
        }

        this.team = team;

        if(team != null && !team.getMembers().contains(this)){
            this.team.getMembers().add(this);
        }
    }
}

class Team{
    public void addMember(Member member){
        if(!this.members.contains(member)){
            this.members.add(member);
        }

        member.setTeam(this);
    }
}
무한루프에 빠질 수 있는 가성성과 위의 버그를 제거하였다.
양방향 연관관계를 형성할 때는 항상 위처럼 연관관계 편의 메서드를 만들어줘야 한다(필수!).

@Column
팀의 id랑 멤버의 id를 가져와서 team_id로 가져오게됨 자동으로

실전 예제 3까지 끝냄


주인한테만 사용하는거
JoinColumn
외래 키가 참조하는 대상 테이블의 컬럼명

제네릭 검색해보기!!





















































